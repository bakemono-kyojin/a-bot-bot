# - *- coding: utf- 8 - *-
import asyncio
import json
import time

from aiohttp import ClientConnectorCertificateError
from async_class import AsyncClass
#from yoomoney import Client
from coinbase.wallet.client import Client

from tgbot.services.api_session import RequestsSession
from tgbot.services.api_sqlite import update_paymentx, get_upaymentx, get_paymentx, update_upaymentx
from tgbot.utils.misc_functions import send_admins


# –ê–ø–∏ —Ä–∞–±–æ—Ç—ã —Å YooMoney
class CoinbaseAPI(AsyncClass):
    async def __ainit__(self, suser_id=919148970, api_key=None, api_token=None):
        self.suser_id = 919148970
        self.api_token = get_upaymentx(self.suser_id)['coinbase_token']
        self.api_key = get_upaymentx(self.suser_id)['coinbase_key']
        self.pay_method = get_upaymentx(self.suser_id)['way_coinbase']
        print(self.api_token, self.api_key, self.pay_method)
        client = Client(api_key, api_secret)
        account_id = client.get_primary_account()['id']
        print("111")
        print(account_id)
        sum = float(str(get_amount / usdt_price)[:10]) #—Å–∫–æ–ª—å–∫–æ —Å–∞—Ç–æ—Ö –Ω—É–∂–Ω–æ —é–∑–µ—Ä—É –æ–ø–ª–∞—Ç–∏—Ç—å
        address_for_tranz = client.create_address(account_id)['address'] #–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        print(address_for_tranz)

        '''if suser_id is not None:
            self.suser_id = suser_id
            self.api_token = get_upaymentx(self.suser_id)['coinbase_token']
            self.api_key = get_upaymentx(self.suser_id)['coinbase_key']
            self.pay_method = get_upaymentx(self.suser_id)['way_coinbase']
                #self.token = token
                #self.client_id = client_id
                #self.acc_number = acc_number
                #self.redirect_url = redirect_url
        else:
            #self.login = get_upaymentx(self.user_id)['qiwi_login']
            #self.token = get_upaymentx(self.user_id)['qiwi_token']
            #self.secret = get_upaymentx(self.user_id)['qiwi_secret']
            #self.login = get_paymentx()['qiwi_login']
            self.suser_id = 919148970
            self.api_token = get_upaymentx(self.suser_id)['coinbase_token']
            self.api_key = get_upaymentx(self.suser_id)['coinbase_key']
            self.pay_method = get_upaymentx(self.suser_id)['way_coinbase']
            #self.base_url = "https://yoomoney.ru/api/"
            #self.headers = {"authorization": f"Bearer {self.token}"}
            #self.client_id = get_paymentx()['yoo_client_id']
            #self.user_check_pass = user_check_pass
            #self.user_bill_pass = user_bill_pass
            #self.check_pass = check_pass
            #self.add_pass = add_pass
            #self.dp = dp
        print(self.api_token, self.api_key, self.pay_method)

            #api_key = 'QUmnMHJ7OrOJnIM4'
            #api_secret = 'gQr0L7ypPQXTpYRDzXJFILcAARRjBynH'
            #client = Client(api_key, api_secret)
            #account_id = client.get_primary_account()['id']


            #sum = int(sum) + 10 #–ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∏—Å—Å–∏—è –≤ btc
            #btc_price = round(float((client.get_buy_price(currency_pair='BTC-RUB')["amount"])))
            #print(btc_price)
            #sum = float(str(sum / btc_price)[:10]) #—Å–∫–æ–ª—å–∫–æ —Å–∞—Ç–æ—Ö –Ω—É–∂–Ω–æ —é–∑–µ—Ä—É –æ–ø–ª–∞—Ç–∏—Ç—å
            #address_for_tranz = client.create_address(account_id)['address'] #–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ–ø–ª—Ç—ã
            #print(address_for_tranz)'''

    # –†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º –æ –Ω–µ—Ä–∞–±–æ—á–µ–º –∫–∏–≤–∏
    @staticmethod
    async def error_wallet():
        await send_admins("<b> Yoo –∫–æ—à–µ–ª—ë–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚ùå</b>\n"
                          "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ ‚ùó")

    #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async def update_coinbase(self):
        update_upaymentx(user_id=self.suser_id, coinbase_key=self.api_key, coinbase_token=self.api_token, yoo_client_id=self.client_id)

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    async def pre_checker(self):
        if self.acc_number != "None":
            if self.add_pass:
                status, response = await self.check_account()
            else:
                status, response, code = await self.check_logpass()
            await asyncio.sleep(0.5)

            if self.add_pass:
                await self.dp.edit_text(response)
                if status:
                    update_upaymentx(user_id=self.suser_id, coinbase_key=self.api_key, coinbase_token=self.api_token, yoo_client_id=self.client_id)
                else:
                    return False
            elif self.check_pass:
                if status:
                    text_secret = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" if self.secret == "None" else self.secret
                    await self.dp.answer(f"<b> Coinbase –∫–æ—à–µ–ª—ë–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç ‚úÖ</b>\n"
                                         f"‚óæ –ö–æ—à–µ–ª–µ–∫: <code>{self.login}</code>\n"
                                         f"‚óæ –¢–æ–∫–µ–Ω: <code>{self.token}</code>")
                else:
                    await self.error_wallet()
                    return False
            elif self.user_bill_pass:
                if not status:
                    await self.dp.edit_text(
                        "<b>‚ùó –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                        "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.</b>")
                    await self.error_wallet()
                    return False
            elif self.user_check_pass:
                if not status:
                    await self.dp.answer(
                        "‚ùó –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                        "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.", True)
                    await self.error_wallet()
                    return False
            elif not status:
                await self.error_wallet()
                return False

            return True
        else:
            if self.user_bill_pass:
                await self.dp.edit_text(
                    "<b>‚ùó –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                    "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.</b>")
            await self.error_wallet()
            return False


    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    async def bill_pay(self, get_amount, get_way):
        client = Client(api_key, api_secret)
        account_id = client.get_primary_account()['id']
        print(get_amount)
        sum = float(str(get_amount / usdt_price)[:10]) #—Å–∫–æ–ª—å–∫–æ —Å–∞—Ç–æ—Ö –Ω—É–∂–Ω–æ —é–∑–µ—Ä—É –æ–ø–ª–∞—Ç–∏—Ç—å
        address_for_tranz = client.create_address(account_id)['address'] #–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        print(address_for_tranz)
        '''account_id = client.get_primary_account()['id']
        sum = int(sum) + 10 #–ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∏—Å—Å–∏—è –≤ btc
        usdt_price = round(float((client.get_buy_price(currency_pair='USDT-RUB')["amount"])))
        print(usdt_price)
        sum = float(str(sum / usdt_price)[:10]) #—Å–∫–æ–ª—å–∫–æ —Å–∞—Ç–æ—Ö –Ω—É–∂–Ω–æ —é–∑–µ—Ä—É –æ–ø–ª–∞—Ç–∏—Ç—å
        address_for_tranz = client.create_address(account_id)['address'] #–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ–ø–ª—Ç—ã
        print(address_for_tranz)
        receipt = str(int(time.time() * 100))'''

        if get_way == "CoinBase":
            return_message = f"<b>üÜô –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ USDT</b>\n" \
                             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                             f"ü•ù –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ \n" \
                             f"<code>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</code> –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º —Å—á—ë—Ç\n" \
                             f"‚ùó –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—á–µ—Ç–∞.\n" \
                             f"‚ùó –ê–¥—Ä–µ—Å:{address_for_tranz}.\n" \
                             f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{get_amount}‚ÇΩ</code>\n" \
                             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                             f"üîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <code>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</code>"

            return return_message, receipt
        return False, False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Ñ–æ—Ä–º–µ
    async def check_formy(self, receipt):

        print(self.token)

        client = Client(self.token)
        history = client.operation_history(label=receipt)

        for operation in history.operations:

            pay_status = operation.status  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
            pay_amount = int(float(operation.amount))  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä—É–±–ª—è—Ö

        return pay_status, pay_amount

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
    async def check_send(self, receipt):
        response = await self.pre_checker()
        if response:
            status, response, code = await self._request(
                "payment-history",
                "v2",
                "payments",
                {"rows": 30, "operation": "IN"},
            )

            pay_status = False
            pay_amount = 0

            for check_pay in response['data']:
                if str(receipt) == str(check_pay['comment']):
                    if str(check_pay['sum']['currency']) == "643":
                        pay_status = True
                        pay_amount = int(float(check_pay['sum']['amount']))
                    else:
                        return_message = 1
                    break

            return_message = 3 if pay_status else 2
            return return_message, pay_amount

        return 4, False
